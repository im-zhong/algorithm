# Date: 2025/3/3
# Authoer: zhangzhong
# Tips:
#   - Pre-commit(https://pre-commit.com/) is a framework for managing and maintaining multi-language pre-commit hooks.
#   - All the rev of repos and version of tools are the latest when this file is created
#   - Make sure the configuration of all these tools are consistent with the [pyproject.toml] file

fail_fast: false
repos:
  # Some out-of-the-box hooks for pre-commit
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      # Prevent giant files from being committed
      - id: check-added-large-files
      # Simply check whether files parse as valid python
      - id: check-ast
      # Require literal syntax when initializing empty or zero Python builtin types
      - id: check-builtin-literals
      # Checks for a common error of placing code before the docstring
      - id: check-docstring-first

      # something wrong with this check
      # Checks that non-binary executables have a proper shebang
      # - id: check-executables-have-shebangs

      # Attempts to load all json files to verify syntax
      # https://github.com/pre-commit/pre-commit/issues/1320 do not support json with comments
      # - id: check-json
      # Check for files that contain merge conflict strings
      - id: check-merge-conflict
      # Checks that scripts with shebangs are executable
      - id: check-shebang-scripts-are-executable
      # Checks for symlinks which do not point to anything
      - id: check-symlinks
      # Attempts to load all TOML files to verify syntax
      - id: check-toml
      # Ensures that links to vcs websites are permalinks
      - id: check-vcs-permalinks
      # Attempts to load all xml files to verify syntax
      - id: check-xml
      # Attempts to load all yaml files to verify syntax
      - id: check-yaml
      # Makes sure files end in a newline and only a newline
      - id: end-of-file-fixer
      # Trims trailing whitespace
      - id: trailing-whitespace

  # This is a pre-commit hook which verifies that .json files in a repository are valid JSON5.
  # The JSON5 format is similar to JSON, but it permits comments, trailing commas, and more.
  - repo: https://gitlab.com/bmares/check-json5
    rev: v1.0.0
    hooks:
      - id: check-json5

  # Prettier(https://prettier.io/) is an opinionated code formatter
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      # Run prettier on specified file types
      - id: prettier
        types_or: [json, toml, yaml]

  - repo: https://github.com/astral-sh/ruff-pre-commit
    # Ruff version.
    rev: v0.11.5
    hooks:
      # Run the linter.
      - id: ruff
        args: [--fix]
      # Run the formatter.
      - id: ruff-format

  # - repo: https://github.com/pre-commit/mirrors-clang-format
  #   rev: "v20.1.0" # Use the sha / tag you want to point at
  #   hooks:
  #     - id: clang-format

  - repo: https://github.com/pocc/pre-commit-hooks
    rev: v1.3.5
    hooks:
      - id: clang-format
      - id: clang-tidy
        args: [
            "--use-color",
            "--fix",
            "-p=./build", #  # Explicitly tell clang-tidy where to find the compilation database
          ]
      # - id: include-what-you-use

  # # Black(https://black.readthedocs.io/en/stable/) is the uncompromising python code formatter
  # - repo: https://github.com/psf/black
  #   rev: 25.1.0
  #   hooks:
  #     - id: black
  #       language_version: python3
  #       args: [--quiet]

  # # A Python utility / library to sort imports
  # - repo: https://github.com/pycqa/isort
  #   rev: 6.0.1
  #   hooks:
  #     - id: isort
  #       name: isort
  #       # Sorting imports compatible with black code style
  #       # Only process changed files, rather than all files in the repository
  #       args: ["--profile", "black", "--filter-files"]

  # # Flake8(https://flake8.pycqa.org/en/latest/) check the style and quality of python code
  # - repo: https://github.com/pycqa/flake8
  #   rev: 7.1.2
  #   hooks:
  #     - id: flake8
  #       additional_dependencies:
  #         # A plugin(https://github.com/PyCQA/flake8-bugbear) for Flake8 finding likely bugs and design problems in your program
  #         - flake8-bugbear==24.12.12
  #         # A flake8 plugin(https://github.com/MartinThoma/flake8-simplify) that helps you to simplify code
  #         - flake8-simplify==0.21.0
  #         # A flake8 plugin(https://github.com/adamchainz/flake8-comprehensions) to help you write better list/set/dict comprehensions
  #         - flake8-comprehensions==3.16.0
  #       # ignore E501 line too long
  #       args: ["--ignore=E501"]

  # Mypy(https://www.mypy-lang.org/) is an optional static type checker for Python that aims to combine the benefits of dynamic (or "duck") typing and static typing.
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.15.0
    hooks:
      # Enable strict mode(https://mypy.readthedocs.io/en/stable/command_line.html#cmdoption-mypy-strict) for better type checking
      - id: mypy
        args:
          [
            --strict,
            --explicit-package-bases,
            "--python-executable",
            "./.venv/bin/python",
          ]
        # https://stackoverflow.com/questions/74291006/mypy-pre-commit-results-differ-from
        # according to different projects, mypy should include additional dependencies
        # Because pre-commit runs mypy from an isolated virtualenv (without your dependencies) you may also find it useful to add the typed dependencies to additional_dependencies so mypy can better perform dynamic analysis
        # additional_dependencies:
        #   - types-requests
        #   - pydantic
        #   - aiohttp
        #   - types-redis
        #   - fastapi
        #   - uvicorn
        #   - httpx

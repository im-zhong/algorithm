project(linked_list)

# 每个文件之间都不需要有依赖，这样是最简单的，每个文件都可以是一个单独的可执行文件
# 也就是一个单独的doctest
add_executable(test_singly_linked_list singly_linked_list.cpp)
target_link_libraries(test_singly_linked_list PRIVATE doctest::doctest)

# no
# # Register with CTest for better test management
# include(CTest)
# add_test(NAME test_singly_linked_list COMMAND test_singly_linked_list)

add_executable(test_leetcode_21_merge_two_lists leetcode_21_merge_two_lists.cpp)
target_link_libraries(test_leetcode_21_merge_two_lists PRIVATE doctest::doctest)

add_executable(test_leetcode_86_partition_list leetcode_86_partition_list.cpp)
target_link_libraries(test_leetcode_86_partition_list PRIVATE doctest::doctest)

# 不行，不能用 - , 我们双击没有办法全选，还是全部用_吧
add_executable(test_leetcode_23_merge-k-sorted-lists leetcode_23_merge-k-sorted-lists.cpp)
target_link_libraries(test_leetcode_23_merge-k-sorted-lists PRIVATE doctest::doctest)

add_executable(test_leetcode_19_remove-nth-node-from-end-of-list leetcode_19_remove-nth-node-from-end-of-list.cpp)
target_link_libraries(test_leetcode_19_remove-nth-node-from-end-of-list PRIVATE doctest::doctest)

add_executable(test_leetcode_LCR_140_lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof leetcode_LCR_140_lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof.cpp)
target_link_libraries(test_leetcode_LCR_140_lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof PRIVATE doctest::doctest)

add_executable(test_leetcode_876_middle-of-the-linked-list leetcode_876_middle-of-the-linked-list.cpp)
target_link_libraries(test_leetcode_876_middle-of-the-linked-list PRIVATE doctest::doctest)

add_executable(test_leetcode_141_linked_list_cycle leetcode_141_linked_list_cycle.cpp)
target_link_libraries(test_leetcode_141_linked_list_cycle PRIVATE doctest::doctest)

add_executable(test_leetcode_160_intersection_of_two_linked_lists leetcode_160_intersection_of_two_linked_lists.cpp)
target_link_libraries(test_leetcode_160_intersection_of_two_linked_lists PRIVATE doctest::doctest)

add_executable(test_leetcode_83_remove_duplicates_from_sorted_list leetcode_83_remove_duplicates_from_sorted_list.cpp)
target_link_libraries(test_leetcode_83_remove_duplicates_from_sorted_list PRIVATE doctest::doctest)

add_executable(test_leetcode_146_lru_cache leetcode_146_lru_cache.cpp)
target_link_libraries(test_leetcode_146_lru_cache PRIVATE doctest::doctest)


add_executable(test_leetcode_460_lfu_cache leetcode_460_lfu_cache.cpp)
target_link_libraries(test_leetcode_460_lfu_cache PRIVATE doctest::doctest)


add_executable(test_leetcode_82_remove_duplicates_from_sorted_list_ii leetcode_82_remove_duplicates_from_sorted_list_ii.cpp)
target_link_libraries(test_leetcode_82_remove_duplicates_from_sorted_list_ii PRIVATE doctest::doctest)


add_executable(test_leetcode_264_ugly_number_ii leetcode_264_ugly_number_ii.cpp)
target_link_libraries(test_leetcode_264_ugly_number_ii PRIVATE doctest::doctest)

add_executable(test_leetcode_378_kth_smallest_element_in_a_sorted_matrix leetcode_378_kth_smallest_element_in_a_sorted_matrix.cpp)
target_link_libraries(test_leetcode_378_kth_smallest_element_in_a_sorted_matrix PRIVATE doctest::doctest)

add_executable(test_leetcode_373_find_k_pairs_with_smallest_sums leetcode_373_find_k_pairs_with_smallest_sums.cpp)
target_link_libraries(test_leetcode_373_find_k_pairs_with_smallest_sums PRIVATE doctest::doctest)
